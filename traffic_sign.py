# -*- coding: utf-8 -*-
"""traffic sign.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bY0O5xjxTAa7jY9xWOvDgwY3ApsWSl9O
"""

#경로 마운트
from google.colab import drive
drive.mount('/content/drive')

!pip install tqdm
from tqdm import tqdm

# 프로젝트 경로 이동
import os
os.chdir("/content/drive/MyDrive/ultralytics")

"""
#파일 경로 수정 test datasets -> valid datasets
import os
import pandas
import shutil
!pip install nbmerge

src = "/content/drive/MyDrive/valid/images"
dst = "/content/drive/MyDrive/test/images"

file_list = os.listdir(dst)

for file in file_list:
  dst_file_path = os.path.join(dst, file)
  shutil.move(dst_file_path, src)
"""

import shutil
shutil.rmtree('/content/drive/MyDrive/ultralytics/runs/detect/train')

# yolov8 프로젝트 제작에 필요한 라이브러리 설치
!pip install torch torchvision numpy matplotlib

# YOLOv8 소스 코드 다운로드 GitHub 사용해서 소스 코드 받기
!git clone http://github.com/ultralytics/ultralytics.git

#ultralytics 패키지 설 (머신러닝, 딥러 도구 - 객체 검)
!pip install ultralytics
# 프로젝트에 필요한 환경 및 모든 종속성 설치
!pip install -r requirements.txt

!pip freeze > requirements.txt # yolov8n.pt 파일 생성 확인
!yolo predict

"""
#오픈소스 프로젝트 - 커스텀 학(전이 학)
# korea traffic sign
!pwd
!curl -L "https://universe.roboflow.com/ds/ga4nVmGRid?key=nWdif6xhJ5" > roboflow.zip; unzip roboflow.zip; rm roboflow.zip
"""

# train 폴더와 test, valid 폴더 생성 확인
# glob을 통한 이미지 개수 확인하기
# 회전차로 valid 이미지 18 / txt 파일 13개 -> 5개 차이남
!pwd
from glob import glob

train_img_list = glob('/content/drive/MyDrive/ultralytics/train/images/*.jpg')
train_txt_list = glob('/content/drive/MyDrive/ultralytics/train/labels/*.txt')

valid_img_list = glob('/content/drive/MyDrive/ultralytics/valid/images/*.jpg')
valid_txt_list = glob('/content/drive/MyDrive/ultralytics/valid/labels/*.txt')

print(len(train_img_list), len(train_txt_list))
print(len(valid_img_list), len(valid_txt_list))

# 파일 사용하기
with open('/content/drive/MyDrive/ultralytics/train.txt', 'w') as f:
    f.write('\n'.join(train_img_list) + '\n')

with open('/content/drive/MyDr  ive/ultralytics/val.txt', 'w') as f:
    f.write('\n'.join(valid_img_list) + '\n')

""" with open('/content/drive/MyDrive/ultralytics/test.txt', 'w') as f:
    f.write('\n'.join(val_img_list) + '\n') """

# yaml 파일 수정하기
import yaml

with open('/content/drive/MyDrive/ultralytics/data.yaml', 'r') as f :
  data = yaml.full_load(f) # yaml.load -> yaml.full_load

print(data)

# 경로 설정하기
data['train'] = '/content/drive/MyDrive/ultralytics/train.txt'
data['val'] = '/content/drive/MyDrive/ultralytics/val.txt'


# 새로 업데이트 된 YAML 파일 저장하기
"""with open('/content/drive/MyDrive/ultralytics/data.yaml', 'w') as f :
  yaml.dump(data, f)
"""

#yolo v5 모델을 사용하여 객체 감지 수행
!pwd
!yolo detect train data=/content/drive/MyDrive/ultralytics/data.yaml model=yolov8n.pt epochs=50 lr0=0.001 batch=64 device=0 dropout = 0.2

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir runs

import os
from collections import defaultdict

def count_class_instances(label_directory, class_names):
    class_counts = defaultdict(int)

    # 각 클래스 이름에 대해 초기화
    for class_name in class_names:
        class_counts[class_name] = 0

    # 라벨 디렉토리 내의 모든 텍스트 파일 확인
    for filename in os.listdir(label_directory):
        if filename.endswith(".txt"):  # 라벨 파일만 처리
            file_path = os.path.join(label_directory, filename)

            with open(file_path, 'r') as file:
                for line in file:
                    parts = line.strip().split()
                    if parts:
                        class_index = int(parts[0])  # 클래스 인덱스 가져오기
                        class_name = class_names[class_index]
                        class_counts[class_name] += 1  # 해당 클래스의 개수 증가

    return class_counts

# 사용 예시
train_label_directory = r'/content/drive/MyDrive/ultralytics/train/labels'
val_label_directory = r'/content/drive/MyDrive/ultralytics/valid/labels'

class_names = ['crosswalk', 'left sign', 'U_turn_sign', 'School zone', 'slow', 'stop', 'speed bump', 'wheelbarrow', '50km', 'right sign', '60km']

# 각 디렉토리에 대해 클래스 인스턴스 개수 세기
train_class_counts = count_class_instances(train_label_directory, class_names)
val_class_counts = count_class_instances(val_label_directory, class_names)

# 결과 출력
print("Train 데이터셋 클래스 개수:")
for class_name, count in train_class_counts.items():
    print(f"{class_name}: {count}")

print("\nValidation 데이터셋 클래스 개수:")
for class_name, count in val_class_counts.items():
    print(f"{class_name}: {count}")

## ultralytics 패키지 설치 (필요 시)

# YOLOv8 임포트
from ultralytics import YOLO
import os

# pre-trained 모델 호출
model = YOLO('yolov8n.pt')

# 사용자 지정 학습된 모델 경로 설정
best_model_path = os.path.join('/content/drive/MyDrive/ultralytics/runs/detect/epoch50,batch16/weights/best.pt')

# 사용자 지정 학습된 모델 호출
best_model = YOLO(best_model_path)

"""
# 모델 평가
metrics = best_model.val(split='val')

# 평가 결과 출력
print(metrics)
"""

import cv2
import numpy as np
import yaml
from ultralytics import YOLO
from IPython.display import Audio, display
import os

# YOLO 모델 초기화 (모델 파일 경로를 지정하거나 기본 모델을 사용)
model = YOLO('/content/drive/MyDrive/ultralytics/runs/detect/epoch50,batch16/weights/best.pt')  # 또는 'yolov8s.pt', 'yolov8m.pt', 'yolov8l.pt', 'yolov8x.pt' 등

# data.yaml 파일 경로
data_yaml_path = '/content/drive/MyDrive/ultralytics/data.yaml'  # data.yaml 파일 경로

# data.yaml 파일에서 클래스 이름 가져오기
with open(data_yaml_path, 'r') as f:
    data = yaml.safe_load(f)
classes = data['names']

# 사운드 파일 경로 설정
sound_files = {
    'crosswalk': '/content/drive/MyDrive/ultralytics/Pling Sound.mp3',
    'left sign': '/content/drive/MyDrive/ultralytics/Pling Sound.mp3',
    'U_turn_sign': '/content/drive/MyDrive/ultralytics/Pling Sound.mp3',
    'School zone': '/content/drive/MyDrive/ultralytics/Pling Sound.mp3',
    'slow': '/content/drive/MyDrive/ultralytics/Pling Sound.mp3',
    'stop': '/content/drive/MyDrive/ultralytics/Pling Sound.mp3',
    'speed bump': '/content/drive/MyDrive/ultralytics/Pling Sound.mp3',
    'wheelbarrow': '/content/drive/MyDrive/ultralytics/Pling Sound.mp3',
    '50km': '/content/drive/MyDrive/ultralytics/Pling Sound.mp3',
    'right sign': '/content/drive/MyDrive/ultralytics/Pling Sound.mp3',
    '60km': '/content/drive/MyDrive/ultralytics/Pling Sound.mp3'
    # 각 클래스에 대한 사운드 파일을 추가
}

# 비디오 파일 열기
video_path = '/content/drive/MyDrive/dataset_video/Train_Video_3.mp4'
cap = cv2.VideoCapture(video_path)

# 비디오 저장 설정
fourcc = cv2.VideoWriter_fourcc(*'XVID')
out = cv2.VideoWriter('/content/drive/MyDrive/dataset_video/Test_Video_3.mp4', fourcc, 20.0, (int(cap.get(3)), int(cap.get(4))))

detected_classes = set()

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # 객체 탐지를 위해 YOLOv8 모델 사용
    results = model(frame)

    # 탐지된 객체의 정보를 수집
    for result in results:
        boxes = result.boxes.xyxy.cpu().numpy()
        class_ids = result.boxes.cls.cpu().numpy().astype(int)
        confidences = result.boxes.conf.cpu().numpy()

        # 탐지된 객체의 이름을 화면 중간 상단에 표시 및 바운딩 박스를 그림
        for i in range(len(boxes)):
            x1, y1, x2, y2 = map(int, boxes[i])

            # 클래스 인덱스 유효성 검사
            if class_ids[i] < len(classes):
                label = classes[class_ids[i]]
                confidence = confidences[i]

                # 바운딩 박스 그리기
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

                # 객체의 이름을 전체 영상의 중간 상단에 표시
                text = f"{label}: {confidence:.2f}"
                cv2.putText(frame, text, (frame.shape[1] // 2 - len(text) * 10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

                # 클래스별 알림음 재생
                if label in sound_files and label not in detected_classes:
                    display(Audio(sound_files[label], autoplay=True))
                    detected_classes.add(label)
            else:
                print(f"Invalid class index: {class_ids[i]}")

    # 결과 비디오에 프레임 추가
    out.write(frame)

# 비디오 파일 닫기
cap.release()
out.release()
cv2.destroyAllWindows()

